# Project Rules: sentra-cursor
# Developed by doctorcodex

## Project Overview
- **Project Name**: sentra-cursor
- **Type**: [Web App / API / Full-Stack / Mobile / Library] # ← Edit sesuai jenis project
- **Purpose**: [Brief description of what this project does] # ← Isi tujuan project
- **Status**: Development # [Development / Staging / Production]

## Tech Stack
### Backend
- Language: [TypeScript/Python/Go] # ← Pilih
- Framework: [Next.js/FastAPI/Express/Fastify/Fiber] # ← Pilih
- Database: [PostgreSQL/MySQL/MongoDB/Supabase] # ← Pilih
- ORM: [Prisma/TypeORM/SQLAlchemy/GORM] # ← Pilih (optional)

### Frontend (if applicable)
- Framework: [Next.js/React/Vue/Svelte] # ← Pilih
- Styling: [Tailwind CSS/CSS Modules/Styled Components] # ← Pilih
- UI Library: [shadcn/ui/MUI/Chakra/Radix] # ← Pilih (optional)
- State: [TanStack Query/Zustand/Redux/Context] # ← Pilih

### DevOps & Tools
- Package Manager: [npm/pnpm/yarn/pip/go mod] # ← Pilih
- Linter: [ESLint/Ruff/golangci-lint] # ← Pilih
- Formatter: [Prettier/Black/gofmt] # ← Pilih
- Testing: [Vitest/Jest/Pytest/Testing Library] # ← Pilih
- CI/CD: [GitHub Actions/GitLab CI/Vercel] # ← Pilih (optional)

## Folder Structure
```
sentra-cursor/
├── docs/              # Architecture, ADR, API specs
├── src/               # Source code
│   ├── lib/          # Utils & helpers
│   ├── domain/       # Entities, value objects
│   ├── app/          # Use cases, controllers, routes
│   └── types/        # TypeScript types / interfaces
├── tests/            # Unit, integration, E2E tests
├── scripts/          # DevOps, tooling scripts
├── infra/            # IaC (Docker, k8s, Terraform)
├── configs/          # Config files (no secrets!)
├── public/           # Static assets (if web app)
└── prisma/           # Database schema & migrations (if using Prisma)
```

## Naming Conventions
- **Files/Folders**: lowercase, kebab-case or snake_case
- **Components**: PascalCase (e.g., `UserProfile.tsx`)
- **Functions/Variables**: camelCase (e.g., `getUserById`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `API_BASE_URL`)
- **Types/Interfaces**: PascalCase with `I` prefix or `Type` suffix (e.g., `IUser` or `UserType`)

## API Design (if applicable)
- **Base URL**: `/api/v1/`
- **Response Format**:
  ```json
  {
    "success": true,
    "data": { ... },
    "error": null
  }
  ```
- **Error Format**:
  ```json
  {
    "success": false,
    "data": null,
    "error": {
      "code": "ERR_USER_NOT_FOUND",
      "message": "User with ID 123 not found"
    }
  }
  ```
- **Pagination**: Use `limit` and `cursor` (or `page` and `pageSize`)
- **Authentication**: [JWT/OAuth2/Supabase/Session] # ← Edit

## Database Conventions (if applicable)
- **Table Names**: snake_case, plural (e.g., `users`, `blog_posts`)
- **Column Names**: snake_case (e.g., `created_at`, `user_id`)
- **Primary Keys**: `id` (UUID or auto-increment)
- **Timestamps**: Always include `created_at` and `updated_at`
- **Foreign Keys**: `{table}_id` (e.g., `user_id`, `post_id`)

## Environment Variables
```bash
# Required env vars for this project:
DATABASE_URL=           # Database connection string
API_KEY=                # External API key
JWT_SECRET=             # JWT signing secret
NODE_ENV=               # development | staging | production
PORT=                   # Server port (default: 3000)
```

## Testing Strategy
- **Unit Tests**: >80% coverage, test pure functions & business logic
- **Integration Tests**: Test API endpoints, database interactions
- **E2E Tests**: Critical user flows only (login, checkout, etc.)
- **Test Files**: `*.test.ts` or `*.spec.ts` in `/tests/` folder
- **Mock Data**: Store in `/tests/fixtures/`

## Git Workflow
- **Branches**: `feat/*`, `fix/*`, `chore/*`, `refactor/*`, `docs/*`
- **Commit Format**: Conventional Commits
  ```
  feat: add user authentication
  fix: resolve CORS issue on login endpoint
  chore: update dependencies
  ```
- **PR Requirements**:
  - [ ] All tests passing
  - [ ] No linter errors
  - [ ] >80% code coverage maintained
  - [ ] Updated documentation (if needed)

## Security
- **Secrets**: Never commit secrets. Use `.env` + `.env.example`
- **Input Validation**: All API inputs validated with [Zod/Yup/Pydantic]
- **Authentication**: [JWT/Session/OAuth2] with proper token expiry
- **Authorization**: Role-based access control (RBAC)
- **Rate Limiting**: Implement on all public endpoints
- **CORS**: Whitelist allowed origins only

## Code Quality
- **Linting**: Must pass before commit (pre-commit hook)
- **Formatting**: Auto-format on save
- **Type Safety**: TypeScript strict mode / Python Mypy strict
- **No `any`**: Avoid unless absolutely necessary & documented
- **Error Handling**: Always use typed errors with codes
- **Logging**: Structured JSON logs, no PII

## Documentation
- **README.md**: Quick start, setup, run instructions
- **API Docs**: OpenAPI/Swagger spec in `/docs/api.yaml`
- **ADRs**: Architectural Decision Records in `/docs/adr/`
- **Changelog**: Keep-a-Changelog format in `changelog.md`

## Performance
- **Bundle Size**: Monitor & set budgets (for frontend)
- **Database**: Index frequently queried columns
- **Caching**: Use Redis/memory cache for expensive queries
- **Lazy Loading**: Code-split heavy routes/components

## Deployment
- **Platform**: [Vercel/Railway/AWS/GCP/Azure] # ← Edit
- **Build Command**: `npm run build` # ← Edit
- **Start Command**: `npm start` # ← Edit
- **Health Check**: `/api/health` endpoint
- **Migrations**: Run before deployment (idempotent)

## Team Conventions
- **Code Reviews**: Required for all PRs
- **Pair Programming**: Encouraged for complex features
- **Daily Sync**: [If applicable]
- **Documentation**: Update as you code, not after

## Project-Specific Rules
# ← Add any custom rules specific to this project below:
# Example:
# - All user-facing text must support i18n
# - Images must be optimized before commit
# - All forms must use react-hook-form + zod validation

### Brand Style: sentra/ui
- Tone: teknis, modern, rapi, compact, presisi
- Icons: Lucide (shadcn), default size 16px; follow current text color
- Density: dense (compact spacing)
- Dark mode: class `.theme-dark` toggled on `<html>`/`<body>`
- Tokens:
  - Colors brand: oxford `#002157`, red `#F71D25`, yellow `#FEE505`, blue `#0085FF`
  - Roles: bg `#ffffff`, bg-alt `#f7f8fb`, fg `#002157`, muted `rgba(0,33,87,0.60)`, border `rgba(0,33,87,0.12)`
  - Typography: Inter; h1 36/42, h2 20/28 (underline 48px), body 14/20, meta 12/18
  - Spacing (dense): 4,6,10,14,18,24,32,40
  - Controls: height-md 32px, pad-x 8px, radius-sm 6px
- Files:
  - `docs/brand/sentra-ui-design-spec.md`
  - `docs/brand/sentra-ui-manifest.json`
  - `docs/brand/sentra-ui-tokens.json`
  - `public/styles/sentra-brand.css` (CSS variables + dark mode)

---
## Notes
- This file overrides/extends User Rules for this project only
- Keep this file updated as project evolves
- Remove placeholder comments after filling in values


---
## Agents

```json
{
  "$schema": "https://www.cursor.com/.cursorrules.schema.json",
  "agents": [
    {
      "name": "codex uix",
      "model": "gpt-5",
      "systemMessage": "You are codex uix, a specialized UI/UX refinement agent for the sentra-website project. Address the user as 'Chief'. Adhere to sentra/ui brand style (docs/brand/*, public/styles/sentra-brand.css), dense layout, Lucide icons, Inter typography, WCAG AA, visible focus, and dark mode via .theme-dark. Preserve logic and component APIs; only make additive, UI-only changes. Prefer minimal diffs with rationale.",
      "permissions": {
        "terminal": false,
        "editFiles": true,
        "runTests": false
      },
      "tools": [
        "mcp:Magic_MCP:21st_magic_component_builder",
        "mcp:Magic_MCP:21st_magic_component_refiner",
        "mcp:Magic_MCP:21st_magic_component_inspiration",
        "mcp:Magic_MCP:logo_search",
        "mcp:GitHub:*",
        "mcp:Vercel:search_vercel_documentation",
        "mcp:Vercel:get_access_to_vercel_url",
        "mcp:Context7:resolve-library-id",
        "mcp:Context7:get-library-docs",
        "mcp:Endgame:review"
      ],
      "context": [
        "docs/brand/sentra-ui-design-spec.md",
        "docs/brand/sentra-ui-manifest.json",
        "docs/brand/sentra-ui-tokens.json",
        "public/styles/sentra-brand.css"
      ]
    },
    {
      "name": "codex guard",
      "model": "gpt-5",
      "systemMessage": "You are Codex Guard, a background quality assistant for UI consistency, a11y, and token hygiene for sentra-website. Address the user as 'Chief'. Enforce sentra/ui tokens (docs/brand/*), dark mode via .theme-dark, WCAG AA, and minimal diffs. Suggest fixes for spacing/radius/contrast and replace hardcoded values with CSS variables.",
      "permissions": {
        "terminal": false,
        "editFiles": true,
        "runTests": false
      },
      "tools": [
        "mcp:21st.dev:component_refiner",
        "mcp:21st.dev:component_inspiration"
      ],
      "context": [
        "docs/brand/sentra-ui-design-spec.md",
        "docs/brand/sentra-ui-manifest.json",
        "docs/brand/sentra-ui-tokens.json",
        "public/styles/sentra-brand.css"
      ]
    },
    {
      "name": "Sentra Engineer",
      "model": "gpt-5",
      "systemMessage": "You are Sentra Engineer, a full-stack coding agent for sentra-website. Address the user as 'Chief'. Follow doctorcodex engineering rules, TypeScript strict, OpenAPI-first, secure by default. Use sentra/ui brand tokens for any UI. Prefer simple, production-ready solutions with tests. Provide minimal diffs and typed errors.",
      "permissions": {
        "terminal": true,
        "editFiles": true,
        "runTests": true
      },
      "tools": [
        "mcp:21st.dev:component_builder",
        "mcp:21st.dev:component_refiner",
        "mcp:21st.dev:component_inspiration",
        "mcp:magic:logo_search",
        "mcp:vercel:search_vercel_documentation",
        "mcp:context7:resolve-library-id",
        "mcp:context7:get-library-docs"
      ],
      "context": [
        "docs/brand/sentra-ui-design-spec.md",
        "docs/brand/sentra-ui-manifest.json",
        "docs/brand/sentra-ui-tokens.json",
        "public/styles/sentra-brand.css",
        "docs/agents/codex-uix.md",
        "docs/agents/codex-guard.md"
      ]
    }
  ]
}
```
